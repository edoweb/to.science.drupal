<?php
/**
 * Copyright 2013 hbz NRW (http://www.hbz-nrw.de/)
 *
 * This file is part of regal-drupal.
 *
 * regal-drupal is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * regal-drupal is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with regal-drupal.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * @file
 * Install for Edoweb entity - need to create the base table for our entity.
 * This table can have as many columns as you need to keep track of
 * entity-specific data that will not be added via attached fields.
 * The minimum information for the entity to work is an id and an entity name.
 */

/**
 * Implements hook_install().
 *
 */
function edoweb_install() {

  // Create roles and permissions
  $permissions = _edoweb_installed_permissions();
  foreach (_edoweb_installed_roles() as $role_desc) {
    $role = new stdClass();
    $role->name = $role_desc['name'];
    user_role_save($role);
    user_role_grant_permissions($role->rid, $permissions[$role->name]);
  }

  // Generate list of available languages
  _edoweb_generate_available_languages(
    dirname(__FILE__) . '/iso639-2.nt',
    drupal_realpath(file_default_scheme() . '://') .  '/available_languages.inc'
  );
}


/**
 * Return a structured array defining the permissions for this content type.
 */
function _edoweb_installed_permissions() {
  return array(
    'edoweb_backend_reader' => array(
      'view any edoweb_basic entity',
      EDOWEB_ENTITY_TYPE . ' entity js read',
    ),
    'edoweb_backend_user' => array(
      'view any edoweb_basic entity',
      'edit any edoweb_basic entity',
      'create edoweb_basic entities',
      'administer edoweb repository',
      EDOWEB_ENTITY_TYPE . ' entity js read',
    ),
    'edoweb_backend_admin' => array(
      'administer edoweb_basic entities',
      'view any edoweb_basic entity',
      'edit any edoweb_basic entity',
      'create edoweb_basic entities',
      'administer edoweb configuration',
      'administer edoweb repository',
      EDOWEB_ENTITY_TYPE . ' entity js read',
    ),
    'edoweb_backend_subscriber' => array(
      'view any edoweb_basic entity',
      EDOWEB_ENTITY_TYPE . ' entity js read',
    ),
    'edoweb_backend_remote' => array(
      'view any edoweb_basic entity',
      EDOWEB_ENTITY_TYPE . ' entity js read',
    ),
  );
}

function _edoweb_viewmodes_for($field_name) {
  $view_modes = array('default' => array());
  $defaults = _edoweb_field_instance_defaults($field_name);
  if (array_key_exists('display', $defaults)) {
    $view_modes = array_merge($view_modes, $defaults['display']);
  }
  return array_keys($view_modes);
}

/**
 * Return a structured array defining the roles for this content type.
 */
function _edoweb_installed_roles() {
  return array(
    array(
      'name' => 'edoweb_backend_reader',
    ),
    array(
      'name' => 'edoweb_backend_user',
    ),
    array(
      'name' => 'edoweb_backend_admin',
    ),
    array(
      'name' => 'edoweb_backend_subscriber',
    ),
    array(
      'name' => 'edoweb_backend_remote',
    ),
  );
}

/**
 * Generate an array containing the available languages from ISO 639-2.
 */
function _edoweb_generate_available_languages($input_file, $output_file) {
  require_once dirname(__FILE__) . '/lib/LibRDF/LibRDF/LibRDF.php';

  $rdf_model = new LibRDF_Model(new LibRDF_Storage());
  $rdf_data = file_get_contents($input_file);
  $rdf_parser = new LibRDF_Parser('ntriples');
  $rdf_model->loadStatementsFromString($rdf_parser, $rdf_data);
  // Create a SPARQL query
  $query = new LibRDF_Query("
    PREFIX mads:   <http://www.loc.gov/mads/rdf/v1#>
    SELECT ?lang ?label
    WHERE
      {
        ?lang a mads:Language .
        ?lang mads:authoritativeLabel ?label .
        FILTER(langMatches(lang(?label), 'DE')) .
      }
    ORDER BY ?label
  ", null, 'sparql');
  // Execute the query. The results of a SPARQL SELECT provide
  // array access by using the variables used in the query as keys:
  $languages = "<?php\n\nreturn array(\n";
  $results = $query->execute($rdf_model);
  foreach ($results as $result) {
    $languages .= "'" . $result['lang']->getValue() . "' => t(\"" .  $result['label']->getValue() . "\"),\n";
  }
  $languages .= ');';
  file_put_contents($output_file, $languages);
}

/*
 * Implements hook_uninstall().
 *
 * At uninstall time we'll notify field.module that the entity was deleted
 * so that attached fields can be cleaned up.
 */
function edoweb_uninstall() {

  // Delete bundles
  $bundles = array_keys(field_info_bundles(EDOWEB_ENTITY_TYPE));
  foreach ($bundles as $bundle) {
    field_attach_delete_bundle('edoweb_basic', $bundle);
  }

  // Delete field instances for now.
  // Check status of http://drupal.org/node/1015846
  $instances = field_info_instances(EDOWEB_ENTITY_TYPE);
  foreach ($instances as $bundle => $instance) {
    field_delete_instance($instance, TRUE);
    console_log("Deleted field instance " . $instance['field_name'] . " in " . $namespace);
  }
  field_purge_batch(count($instances));

  // Revoke permissions and delete roles
  foreach (_edoweb_installed_roles() as $role_desc) {
    $role = user_role_load_by_name($role_desc['name']);
    user_role_revoke_permissions($role->rid, _edoweb_installed_permissions());
    user_role_delete($role_desc['name']);
  }

}
