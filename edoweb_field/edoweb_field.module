<?php
/**
 * Copyright 2013 hbz NRW (http://www.hbz-nrw.de/)
 *
 * This file is part of regal-drupal.
 *
 * regal-drupal is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * regal-drupal is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with regal-drupal.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * Implements hook_field_info().
 */
function edoweb_field_field_info() {
  return array(
    'edoweb_ld_reference' => array(
      'label' => t('A linked data field'),
      'description' => t('This field holds the URI of a linked data resource'),
      'default_widget' => 'edoweb_autocomplete',
      'default_formatter' => 'edoweb_ld_format',
      'property_type' => 'uri',
    ),
  );
}

/**
 * Implements hook_field_is_empty().
 */
function edoweb_field_field_is_empty($item, $field) {
  if (empty($item['value']) && (string) $item['value'] !== '0') {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_field_widget_info().
 *
 * @see field_example_field_widget_form()
 */
function edoweb_field_field_widget_info() {
  return array(
    'edoweb_autocomplete' => array(
      'label' => t('Auto-complete'),
      'field types' => array('edoweb_ld_reference'),
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function edoweb_field_field_formatter_info() {
  return array(
    'edoweb_ld_format' => array(
      'label' => t('Linked data URI'),
      'field types' => array('edoweb_ld_reference'),
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function edoweb_field_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $elements = array();
  foreach ($items as $delta => $item) {
    $elements[$delta] = array(
      '#markup' => l(_edoweb_field_field_get_label($item['value']), $item['value']),
    );
  }
  return $elements;
}

/**
 * Implements hook_field_widget_form().
 *
 * hook_widget_form() is where Drupal tells us to create form elements for
 * our field's widget.
 *
 */
function edoweb_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {

  // Overwrite default autocomplete behaviour
  drupal_add_js(
    drupal_get_path('module', 'edoweb_field') . '/edoweb_field_autocomplete.js',
    array('weight' => '100')
  );

  $value = isset($items[$delta]['value']) ? $items[$delta]['value'] : '';
  // Check if value was set in form input, e.g. when this function
  // is called by ajax via the "Add another item" button.
  $value = isset($form_state['input']['field_edoweb_creator']['und'][$delta]['value']) ?
    $form_state['input']['field_edoweb_creator']['und'][$delta]['value'] : $value;

  $widget = $element;
  $widget['#delta'] = $delta;

  switch ($instance['widget']['type']) {
    case 'edoweb_autocomplete':
      if ($value != '') {
        $widget += array(
          '#type' => 'hidden',
          '#autocomplete_path' => 'edoweb/autocomplete',
          '#value' => $value,
        );
        $element['label'] = array(
          '#type' => 'textfield',
          '#value' => _edoweb_field_field_get_label($value),
          '#disabled' => TRUE,
        );
      } else {
        $widget += array(
          '#type' => 'textfield',
          '#autocomplete_path' => 'edoweb/autocomplete',
        );
      }
      $element['value'] = $widget;
  }

  return $element;
}

function _edoweb_field_field_get_label($resource_uri) {
  $http_options = array(
    'method' => 'GET',
    'headers' => array('Accept' => 'application/rdf+xml'),
  );
  $http_response = _edoweb_http_request($resource_uri, $http_options);
  $rdf_data = $http_response->data;
  $rdf_subject = new LibRDF_URINode($resource_uri);
  $rdf_parser = new LibRDF_Parser('rdfxml');
  $rdf_model = new LibRDF_Model(new LibRDF_Storage());
  $rdf_label_uri = new LibRDF_URINode('http://d-nb.info/standards/elementset/gnd#preferredNameForThePerson');
  $rdf_resource_uri = new LibRDF_URINode($resource_uri);
  try {
    $rdf_model->loadStatementsFromString($rdf_parser, $rdf_data);
    $resource_label = $rdf_model->getTarget($rdf_resource_uri, $rdf_label_uri);
  } catch (LibRDF_Error $e) {
    $resource_label = "Label for $resource_uri";
  } catch (LibRDF_LookupError $e) {
    $resource_label = "Label for $resource_uri";
  }
  LibRDF_LiteralNode::setPlainOutput(true);
  return "$resource_label";
}
